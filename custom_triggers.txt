CUSTOM TRIGGERS

basic idea

- handle-based resource acquisition by mod platform users (i.e. annodue plugins)
- users register intent to use a specific id, flag, etc. and assign callbacks for functionality


trigger id resource allocation

4 bits for game
2 bits for 'standard trigger'
10 bits else

- 0..1023 reserved for game use
- 1024..4095 reserved for internal use
    - e.g. for future 'standard trigger' packs, etc.
- 4096..65535 ok for general use
- more straightforward to mask out a whole chunk instead of trying to tiptoe around
  the game-defined values
- ranges chosen for being easily bitmask-able


trigger flags resource allocation

- leave the game-defined bits alone and don't mess with existing functonality
- some balance between reserving bits for individual triggers as a 'feature' vs extending global flags
- 10 'open' bits to work with

map
 15          11          7           3
 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 
[LOCAL---------/GLOBAL-------][GAME------------]

local    reserved for trigger handler
        - trigger-specific flags/settings, behaviour implemented by trigger logic
        - could be interpreted as a bitfield, number, etc. at the trigger's discretion
global    mod-defined flags for all triggers
game    reserved; game-defined flags for all triggers

questions
- how many bits allocated to local vs global?
    - min. 5 bits needed for local, for it to be used as a track or character id setting
- global handles defined per-bit or per-set?
    - per-set = mod defines a whole group and selects the handle when running a track
    - or, assign a couple of bits as a group seletor, then allocate that multiple of remaining bits?
        - e.g. 2 group bits and 3 behavior bits expands to 12 allocatable global bits
    - or, just treat it as a number lol??
    - i.e. tradeoff between number of total options vs possible concurrent options
- global group needed at all?